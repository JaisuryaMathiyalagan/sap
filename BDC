&---------------------------------------------------------------------
*& Report ZBDC_PRG
&---------------------------------------------------------------------
*&
&---------------------------------------------------------------------
REPORT zbdc_prg.

TYPES:BEGIN OF lty_data,
        matnr TYPE matnr, "Material Number
        mbrsh TYPE mbrsh, "Industry
        mtart TYPE mtart, "material Type
        maktx TYPE maktx, "Material Description
        meins TYPE meins, "Quantity
      END OF lty_data.

DATA:lt_data  TYPE TABLE OF lty_data,
     lwa_data TYPE lty_data.

DATA:lv_file TYPE string.


DATA:lt_bdcdata  TYPE TABLE OF bdcdata,
     lwa_bdcdata TYPE bdcdata. "OCCURS 0 WITH HEADER LINE.


*DATA:   MESSTAB LIKE BDCMSGCOLL OCCURS 0 WITH HEADER LINE.
DATA:lt_messages  TYPE TABLE OF bdcmsgcoll,
     lwa_messages TYPE bdcmsgcoll.

DATA:lv_messages TYPE string.



PARAMETERS:p_file TYPE localfile.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = ' '
    IMPORTING
      file_name     = p_file.


START-OF-SELECTION.

  lv_file = p_file. "Explicit Type Casting

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename            = lv_file
*     FILETYPE            = 'ASC'
      has_field_separator = 'X'
*     HEADER_LENGTH       = 0
*     READ_BY_LINE        = 'X'
*     DAT_MODE            = ' '
*     CODEPAGE            = ' '
*     IGNORE_CERR         = ABAP_TRUE
*     REPLACEMENT         = '#'
*     CHECK_BOM           = ' '
*     VIRUS_SCAN_PROFILE  =
*     NO_AUTH_CHECK       = ' '
* IMPORTING
*     FILELENGTH          =
*     HEADER              =
    TABLES
      data_tab            = lt_data
* CHANGING
*     ISSCANPERFORMED     = ' '
* EXCEPTIONS
*     FILE_OPEN_ERROR     = 1
*     FILE_READ_ERROR     = 2
*     NO_BATCH            = 3
*     GUI_REFUSE_FILETRANSFER       = 4
*     INVALID_TYPE        = 5
*     NO_AUTHORITY        = 6
*     UNKNOWN_ERROR       = 7
*     BAD_DATA_FORMAT     = 8
*     HEADER_NOT_ALLOWED  = 9
*     SEPARATOR_NOT_ALLOWED         = 10
*     HEADER_TOO_LONG     = 11
*     UNKNOWN_DP_ERROR    = 12
*     ACCESS_DENIED       = 13
*     DP_OUT_OF_MEMORY    = 14
*     DISK_FULL           = 15
*     DP_TIMEOUT          = 16
*     OTHERS              = 17
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.


* Include bdcrecx1_s:
* The call transaction using is called WITH AUTHORITY-CHECK!
* If you have own auth.-checks you can use include bdcrecx1 instead.
*include bdcrecx1_s.

START-OF-SELECTION.

  CALL FUNCTION 'BDC_OPEN_GROUP'
    EXPORTING
      client              = sy-mandt
*     dest                = filler8
      group               = 'MM01_grp1'   "group Name
      holddate            = sy-datum
      keep                = 'X'          "abap True "session entries available after processing also if'X'
      user                = sy-uname     "System user name
*     record              = filler1
*     prog                = sy-cprog
*     dcpfm               = '%'
*     datfm               = '%'
*     app_area            = filler12
*     langu               = sy-langu
*    IMPORTING
*     qid                 =
    EXCEPTIONS
      client_invalid      = 1
      destination_invalid = 2
      group_invalid       = 3
      group_is_locked     = 4
      holddate_invalid    = 5
      internal_error      = 6
      queue_error         = 7
      running             = 8
      system_lock_error   = 9
      user_invalid        = 10
      OTHERS              = 11.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

*perform open_group.
  LOOP AT lt_data INTO lwa_data.

    PERFORM bdc_dynpro      USING 'SAPLMGMM' '0060'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  lwa_data-matnr.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=ENTR'.
    PERFORM bdc_field       USING 'RMMG1-MBRSH'
                                  lwa_data-mbrsh.
    PERFORM bdc_field       USING 'RMMG1-MTART'
                                  lwa_data-mtart.
    PERFORM bdc_dynpro      USING 'SAPLMGMM' '0070'.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'MSICHTAUSW-DYTXT(01)'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=ENTR'.
    PERFORM bdc_field       USING 'MSICHTAUSW-KZSEL(01)'
                                  'X'.
    PERFORM bdc_dynpro      USING 'SAPLMGMM' '3000'.
    PERFORM bdc_field       USING 'BDC_OKCODE'
                                  '=BU'.
    PERFORM bdc_field       USING 'MAKT-MAKTX'
                                  lwa_data-maktx.
    PERFORM bdc_field       USING 'BDC_CURSOR'
                                  'MARA-MEINS'.
    PERFORM bdc_field       USING 'MARA-MEINS'
                                  lwa_data-meins.

    CALL FUNCTION 'BDC_INSERT'
*     EXPORTING
*       TCODE                  = FILLER4
*       POST_LOCAL             = NOVBLOCAL
*       PRINTING               = NOPRINT
*       SIMUBATCH              = ' '
*       CTUPARAMS              = ' '
      TABLES
        dynprotab        = lt_bdcdata
      EXCEPTIONS
        internal_error   = 1
        not_open         = 2
        queue_error      = 3
        tcode_invalid    = 4
        printing_invalid = 5
        posting_invalid  = 6
        OTHERS           = 7.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
    REFRESH lt_bdcdata.




*    CALL TRANSACTION 'MM01' USING lt_bdcdata MODE 'A' UPDATE 'S' MESSAGES INTO lt_messages.
*    REFRESH lt_bdcdata.
*
*    LOOP AT lt_messages INTO lwa_messages.
*      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*        EXPORTING
*          msgid               = lwa_messages-msgid
*          msgnr               = lwa_messages-msgnr
*          msgv1               = lwa_messages-msgv1
*          msgv2               = lwa_messages-msgv2
*          msgv3               = lwa_messages-msgv3
*          msgv4               = lwa_messages-msgv4
*        IMPORTING
*          message_text_output = lv_messages.
*      WRITE: / lv_messages.
*    ENDLOOP.
*perform bdc_transaction using 'MM01'.

*perform close_group.

  ENDLOOP.

  CALL FUNCTION 'BDC_CLOSE_GROUP'
    EXCEPTIONS
      not_open    = 1
      queue_error = 2
      OTHERS      = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.





----------------------------------------------------------------------
*        Start new screen                                              *
----------------------------------------------------------------------
FORM bdc_dynpro USING program dynpro.
  CLEAR lwa_bdcdata.
  lwa_bdcdata-program  = program.
  lwa_bdcdata-dynpro   = dynpro.
  lwa_bdcdata-dynbegin = 'X'.
  APPEND lwa_bdcdata TO lt_bdcdata.
ENDFORM.

----------------------------------------------------------------------
*        Insert field                                                  *
----------------------------------------------------------------------
FORM bdc_field USING fnam fval.
  CLEAR lwa_bdcdata.
  lwa_bdcdata-fnam = fnam.
  lwa_bdcdata-fval = fval.
  APPEND lwa_bdcdata TO lt_bdcdata.
ENDFORM.
