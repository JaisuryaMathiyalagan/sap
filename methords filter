&---------------------------------------------------------------------
*& Report ZPRG_FACTORY_FUNCTION
&---------------------------------------------------------------------
*&
&---------------------------------------------------------------------
REPORT zprg_factory_function.

TABLES:vbak,vbap.

TYPES:BEGIN OF lty_vbak,
        vbeln TYPE vbeln_va,
        erdat TYPE erdat,
        erzet TYPE erzet,
        ernam TYPE ernam,
        vbtyp TYPE vbtypl,
      END OF lty_vbak.

DATA:lt_vbak TYPE TABLE OF lty_vbak,
     ls_vbak TYPE lty_vbak.

TYPES:BEGIN OF lty_vbap,
        vbeln TYPE vbeln_va,
        posnr TYPE posnr_va,
        matnr TYPE matnr,
      END OF lty_vbap.

DATA:lt_vbap TYPE TABLE OF lty_vbap,
     ls_vbap TYPE lty_vbap.

DATA:lo_factory TYPE REF TO cl_salv_table.
DATA:lo_functions TYPE REF TO cl_salv_functions_list.
DATA:lo_columns TYPE REF TO cl_salv_columns_table.
DATA:lo_label TYPE REF TO cl_salv_column.
DATA:lo_color TYPE lvc_fname.
DATA:erdat TYPE lvc_fname.
DATA:lo_sort TYPE REF TO cl_salv_sorts.
*data:lo_filter TYPE REF TO CL_SALV_FILTER.
*data:obj_filter TYPE REF TO CL_SALV_SELOPT.
data:lo_filters TYPE REF TO CL_SALV_FILTERS.



SELECT-OPTIONS:s_vbeln FOR vbak-vbeln.

START-OF-SELECTION.

  SELECT vbeln erdat erzet ernam vbtyp
    FROM vbak
    INTO TABLE lt_vbak
    WHERE vbeln IN s_vbeln.

  TRY.
      CALL METHOD cl_salv_table=>factory
*  EXPORTING
*    LIST_DISPLAY   = IF_SALV_C_BOOL_SAP=>FALSE
*    R_CONTAINER    =
*    CONTAINER_NAME =
        IMPORTING
          r_salv_table = lo_factory
        CHANGING
          t_table      = lt_vbak.
    CATCH cx_salv_msg.
  ENDTRY.

  CALL METHOD lo_factory->if_salv_gui_om_table_info~get_functions
    RECEIVING
      value = lo_functions.
  CALL METHOD lo_functions->set_all
    EXPORTING
      value = if_salv_c_bool_sap=>true.
  CALL METHOD lo_factory->if_salv_gui_om_table_info~get_columns
    RECEIVING
      value = lo_columns.
  CALL METHOD lo_columns->set_column_position
    EXPORTING
      columnname = 'ERDAT'
      position   = 2.
  CALL METHOD lo_columns->set_column_position
    EXPORTING
      columnname = 'ERNAM'
      position   = 1.
  TRY.
      CALL METHOD lo_columns->get_column
        EXPORTING
          columnname = 'ERDAT'
        RECEIVING
          value      = lo_label.
    CATCH cx_salv_not_found.
  ENDTRY.

  CALL METHOD lo_label->set_long_text
    EXPORTING
      value = 'SALES_NUMBER'.
  CALL METHOD lo_factory->if_salv_gui_om_table_info~get_sorts
    RECEIVING
      value = lo_sort.
  TRY.
      CALL METHOD lo_sort->add_sort
        EXPORTING
          columnname = 'VBELN'
*         position   =
          sequence   = if_salv_c_sort=>sort_down.
*         subtotal   = IF_SALV_C_BOOL_SAP=>FALSE
*         group      = IF_SALV_C_SORT=>GROUP_NONE
*         obligatory = IF_SALV_C_BOOL_SAP=>FALSE
*        RECEIVING
*          value      =.
    CATCH cx_salv_not_found.
    CATCH cx_salv_existing.
    CATCH cx_salv_data_error.
  ENDTRY.

CALL METHOD lo_factory->if_salv_gui_om_table_info~get_filters
  RECEIVING
    value  = lo_filters
    .
TRY.
CALL METHOD lo_filters->add_filter
  EXPORTING
    columnname = 'VBELN'
    sign       = 'I'
    option     = 'BT'
    low        = '1'
    high       = '20'
*  receiving
*    value      =
    .
  CATCH cx_salv_not_found.
  CATCH cx_salv_data_error.
  CATCH cx_salv_existing.
ENDTRY.










*CALL METHOD lo_columns->get_color_column
*  RECEIVING
*    value  = erdat
*    .
*TRY.
*CALL METHOD lo_columns->set_color_column
*  EXPORTING
*    value  = 'ERDAT'
*    .
*  CATCH cx_salv_data_error.
*ENDTRY.




*CALL METHOD lo_columns->get_color_column
*  RECEIVING
*    value  = lo_color
*    .


*TRY.
*CALL METHOD lo_columns->set_color_column
*  EXPORTING
*    value  = 'ERZET'
*    .
*  CATCH cx_salv_data_error.
*ENDTRY.




  CALL METHOD lo_factory->display
*  IMPORTING
*    EXIT_CAUSED_BY_CALLER =
*    EXIT_CAUSED_BY_USER   =
    .
